// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"

	headtracker "github.com/smartcontractkit/chainlink/core/services/headtracker"
	mock "github.com/stretchr/testify/mock"

	models "github.com/smartcontractkit/chainlink/core/store/models"
)

// BlockFetcherInterface is an autogenerated mock type for the BlockFetcherInterface type
type BlockFetcherInterface struct {
	mock.Mock
}

// BlockRange provides a mock function with given fields: ctx, fromBlock, toBlock
func (_m *BlockFetcherInterface) BlockRange(ctx context.Context, fromBlock int64, toBlock int64) ([]headtracker.Block, error) {
	ret := _m.Called(ctx, fromBlock, toBlock)

	var r0 []headtracker.Block
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []headtracker.Block); ok {
		r0 = rf(ctx, fromBlock, toBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]headtracker.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, fromBlock, toBlock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Chain provides a mock function with given fields: ctx, latestHead
func (_m *BlockFetcherInterface) Chain(ctx context.Context, latestHead models.Head) (models.Head, error) {
	ret := _m.Called(ctx, latestHead)

	var r0 models.Head
	if rf, ok := ret.Get(0).(func(context.Context, models.Head) models.Head); ok {
		r0 = rf(ctx, latestHead)
	} else {
		r0 = ret.Get(0).(models.Head)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Head) error); ok {
		r1 = rf(ctx, latestHead)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchLatestHead provides a mock function with given fields: ctx
func (_m *BlockFetcherInterface) FetchLatestHead(ctx context.Context) (*models.Head, error) {
	ret := _m.Called(ctx)

	var r0 *models.Head
	if rf, ok := ret.Get(0).(func(context.Context) *models.Head); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Head)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncLatestHead provides a mock function with given fields: ctx, head
func (_m *BlockFetcherInterface) SyncLatestHead(ctx context.Context, head models.Head) error {
	ret := _m.Called(ctx, head)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Head) error); ok {
		r0 = rf(ctx, head)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
