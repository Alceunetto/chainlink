// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "github.com/smartcontractkit/chainlink/core/store/models"
)

// ContractSubmitter is an autogenerated mock type for the ContractSubmitter type
type ContractSubmitter struct {
	mock.Mock
}

// CreateEthTransaction provides a mock function with given fields: db, fromAddress, toAddress, payload, gasLimit, maxUnconfirmedTransactions
func (_m *ContractSubmitter) CreateEthTransaction(db *gorm.DB, fromAddress common.Address, toAddress common.Address, payload []byte, gasLimit uint64, maxUnconfirmedTransactions uint64) (*models.EthTx, error) {
	ret := _m.Called(db, fromAddress, toAddress, payload, gasLimit, maxUnconfirmedTransactions)

	var r0 *models.EthTx
	if rf, ok := ret.Get(0).(func(*gorm.DB, common.Address, common.Address, []byte, uint64, uint64) *models.EthTx); ok {
		r0 = rf(db, fromAddress, toAddress, payload, gasLimit, maxUnconfirmedTransactions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EthTx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, common.Address, common.Address, []byte, uint64, uint64) error); ok {
		r1 = rf(db, fromAddress, toAddress, payload, gasLimit, maxUnconfirmedTransactions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
