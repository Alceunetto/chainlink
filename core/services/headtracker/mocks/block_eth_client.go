// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	headtracker "github.com/smartcontractkit/chainlink/core/services/headtracker"

	mock "github.com/stretchr/testify/mock"
)

// BlockEthClient is an autogenerated mock type for the BlockEthClient type
type BlockEthClient struct {
	mock.Mock
}

// BlockByNumber provides a mock function with given fields: ctx, number
func (_m *BlockEthClient) BlockByNumber(ctx context.Context, number int64) (*headtracker.Block, error) {
	ret := _m.Called(ctx, number)

	var r0 *headtracker.Block
	if rf, ok := ret.Get(0).(func(context.Context, int64) *headtracker.Block); ok {
		r0 = rf(ctx, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headtracker.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FastBlockByHash provides a mock function with given fields: ctx, hash
func (_m *BlockEthClient) FastBlockByHash(ctx context.Context, hash common.Hash) (*headtracker.Block, error) {
	ret := _m.Called(ctx, hash)

	var r0 *headtracker.Block
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) *headtracker.Block); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headtracker.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchBlocksByNumbers provides a mock function with given fields: ctx, numbers
func (_m *BlockEthClient) FetchBlocksByNumbers(ctx context.Context, numbers []int64) (map[int64]headtracker.Block, error) {
	ret := _m.Called(ctx, numbers)

	var r0 map[int64]headtracker.Block
	if rf, ok := ret.Get(0).(func(context.Context, []int64) map[int64]headtracker.Block); ok {
		r0 = rf(ctx, numbers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int64]headtracker.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, numbers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
